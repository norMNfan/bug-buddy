---
import Layout from '@layouts/Default.astro';
import RepositoryDetailPage from "../../components/RepositoryDetailPage.tsx"
import Button from '@mui/material/Button';

const { id } = Astro.params;
const token = import.meta.env.GITHUB_TOKEN;

async function fetchRepository() {
  const url = `https://api.github.com/repositories/${id}`;

  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': `token ${token}`,
      'Accept': 'application/vnd.github.v3+json',
    },
  });

  if (!response.ok) {
    throw new Error(`Error fetching repository: ${response.statusText}`);
  }

  return await response.json();
}

const repository = await fetchRepository();
---
<Layout
  title='Repository'
  description='description'
  pageTitle='Repository'
>
<main class="flex-1 flex flex-col gap-4 items-center p-4 justify-center">
  <section class="w-full max-w-md">
    <form id="analyzeForm" onSubmit={(event) => event.preventDefault()}>
      <Button
        id="analyzeButton"
        type="submit"
        variant="contained"
        color="primary"
      >
        Fix Bugs
      </Button>
    </form>

    <RepositoryDetailPage repo={repository} />

    <!-- Loading spinner and message (Initially hidden via inline style) -->
    <div id="loadingMessage" style="display: none;" class="flex items-center gap-2 mt-4">
      <div class="animate-spin rounded-full h-8 w-8 border-t-4 border-blue-500"></div>
      <span>Loading...</span>
    </div>
    
    <!-- Container for displaying the analysis result -->
    <div id="analysisResult" class="mt-4 p-4 bg-gray-100 rounded-md"></div>
  </section>
</main>

<script type="module">
  // Ensure this code runs on the client-side
  const analyzeButton = document.getElementById("analyzeButton");
  const analyzeForm = document.getElementById("analyzeForm");
  const analysisResultContainer = document.getElementById("analysisResult");
  const loadingMessage = document.getElementById("loadingMessage");

  analyzeForm?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent the default form submission

    // Prompt the user with a confirmation dialog
    const proceed = window.confirm("Do you want to proceed with the analysis?");

    if (!proceed) {
      console.log("User canceled the analysis.");
      return; // Exit the function if the user cancels
    }

    // Show the loading message and spinner after the user confirms
    loadingMessage.style.display = "flex";

    try {
      console.log("Create Plan function called");
      
      const createPlanResponse = await fetch('http://localhost:8000/repos/createplan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          "repo_id": "235781423",
          "full_name": "norMNfan/hello-aws"
        }),
      });

      if (!createPlanResponse.ok) {
        throw new Error(`Error analyzing repositories: ${analyzeResponse.statusText}`);
      }

      const createPlanResult = await createPlanResponse.json();
      const planId = createPlanResult.plan_id;

      console.log("Create plan success:", createPlanResult);

      analysisResultContainer.innerHTML = `
        <h2>Plan Created</h2>
        <p><strong>Plan ID:</strong> ${planId}</p>
      `;

      // Save and use the output value to call /repos/runplan
      console.log("Step 2: Running plan with plan ID:", planId);

      const runPlanResponse = await fetch('http://localhost:8000/repos/runplan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ "plan_id": planId }),
      });

      if (!runPlanResponse.ok) {
        throw new Error(`Run plan failed: ${runPlanResponse.statusText}`);
      }

      const runPlanResult = await runPlanResponse.json();
      console.log("Run plan success:", runPlanResult);

      // Display the analysis result in the page
      analysisResultContainer.innerHTML = `
        <h2>Analysis Result</h2>
        <pre>${JSON.stringify(createPlanResult, null, 2)}</pre>
      `;
    } catch (error) {
      console.error("Error during analysis:", error);

      // Display error message in the page
      analysisResultContainer.innerHTML = `
        <h2>Error</h2>
        <p>There was an error processing the analysis. Please try again later.</p>
      `;
    } finally {
      // Hide the loading message after the function completes
      loadingMessage.style.display = "none";
    }
  });
</script>
</Layout>
