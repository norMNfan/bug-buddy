---
import Layout from '@layouts/Default.astro';
import RepositoryDetailPage from "../../components/RepositoryDetailPage.tsx"
import Button from '@mui/material/Button';

const { id } = Astro.params;
const token = import.meta.env.GITHUB_TOKEN;
const PORTIA_API_KEY = import.meta.env.PORTIA_API_KEY;

async function fetchRepository() {
  const url = `https://api.github.com/repositories/${id}`;

  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': `token ${token}`,
      'Accept': 'application/vnd.github.v3+json',
    },
  });

  if (!response.ok) {
    throw new Error(`Error fetching repository: ${response.statusText}`);
  }

  return await response.json();
}

const repository = await fetchRepository();
---
<Layout
  title='Repository'
  description='description'
  pageTitle='Repository'
>
<main class="flex-1 flex flex-col gap-6 items-center p-6 justify-center bg-gray-50">
  <section class="w-full max-w-lg bg-white p-6 rounded-lg shadow-lg">
    <!-- Form Section -->
    <form id="analyzeForm" onSubmit={(event) => event.preventDefault()} class="space-y-4">
      <h2 class="text-xl font-semibold text-center">Fix Bugs</h2>
      <Button
        id="analyzeButton"
        type="submit"
        variant="contained"
        color="primary"
        fullWidth
        class="py-2 text-lg"
      >
        Start Analysis
      </Button>
    </form>

    <!-- Repository Details Section -->
    <div class="mt-6">
      <div class="bg-gray-50 p-4 rounded-md shadow-sm">
        <h3 class="text-lg font-semibold mb-2">Repository Details</h3>
        <p class="text-sm font-medium text-gray-600">ID: <span class="text-blue-600">{repository.id}</span></p>
        <p class="text-sm font-medium text-gray-600">Name: <span class="text-blue-600">{repository.full_name}</span></p>
      </div>
    </div>
    
    <!-- Analysis Result Container -->
    <div id="analysisResult" class="mt-6 p-4 bg-gray-100 rounded-md shadow-sm hidden"></div>

    <!-- Loading spinner and message -->
    <div id="loadingMessage" style="display: none;" class="flex items-center gap-2 mt-6 justify-center">
      <div class="animate-spin rounded-full h-10 w-10 border-t-4 border-blue-500"></div>
      <span id="loadingText" class="text-lg">Creating Plan...</span>
    </div>
  </section>
</main>

<style>
  /* Improved styling for better user experience */
  body {
    font-family: 'Arial', sans-serif;
    background-color: #f9fafb;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .bg-gray-50 {
    background-color: #f9fafb;
  }

  .bg-gray-100 {
    background-color: #f3f4f6;
  }

  .text-blue-600 {
    color: #2563eb;
  }
  
  .text-lg {
    font-size: 1.125rem;
  }

  .text-sm {
    font-size: 0.875rem;
  }

  .font-semibold {
    font-weight: 600;
  }

  .font-medium {
    font-weight: 500;
  }

  .rounded-md {
    border-radius: 0.375rem;
  }

  .shadow-lg {
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .shadow-sm {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .py-2 {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .space-y-4 > * + * {
    margin-top: 1rem;
  }

  /* Added to override the hidden class */
  .show {
    display: block !important;
  }
</style>

<script type="module">
  // Ensure this code runs on the client-side
  const analyzeButton = document.getElementById("analyzeButton");
  const analyzeForm = document.getElementById("analyzeForm");
  const analysisResultContainer = document.getElementById("analysisResult");
  const loadingMessage = document.getElementById("loadingMessage");

  analyzeForm?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent the default form submission

    // Prompt the user with a confirmation dialog
    const proceed = window.confirm("Do you want to proceed with the analysis?");

    if (!proceed) {
      console.log("User canceled the analysis.");
      return; // Exit the function if the user cancels
    }

    // Get reference to the loading text element
    const loadingText = document.getElementById("loadingText");
    
    // Set initial loading message
    loadingText.textContent = "Creating Plan...";
    
    // Show the loading message and spinner after the user confirms
    loadingMessage.style.display = "flex";
    
    // Clear previous results
    analysisResultContainer.innerHTML = "";

    try {
      console.log("Create Plan function called");
      
      /////////////////
      // CREATE PLAN //
      /////////////////
      const createPlanResponse = await fetch('http://localhost:8000/repos/createplan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          "repo_id": "235781423",
          "full_name": "norMNfan/hello-aws"
        }),
      });

      if (!createPlanResponse.ok) {
        throw new Error(`Error creating plan: ${createPlanResponse.statusText}`);
      }

      const createPlanResult = await createPlanResponse.json();
      const planId = createPlanResult.plan_id;

      console.log("plan_id:", planId);

      // Make sure the result container is visible by removing the hidden class
      analysisResultContainer.classList.remove("hidden");

      // Show the Plan ID in the UI
      analysisResultContainer.innerHTML = `
        <h2>Plan Created</h2>
        <p><strong>Plan ID:</strong> ${planId}</p>
      `;

      //////////////
      // RUN PLAN //
      //////////////

      // Update loading message for running plan
      loadingText.textContent = "Running Plan...";
      
      // Save and use the output value to call /repos/runplan
      console.log("Step 2: Running plan with plan ID:", planId);

      const runPlanResponse = await fetch('http://localhost:8000/repos/runplan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ "plan_id": planId }),
      });

      if (!runPlanResponse.ok) {
        throw new Error(`Run plan failed: ${runPlanResponse.statusText}`);
      }

      const runPlanResult = await runPlanResponse.json();
      console.log("Run plan success:", runPlanResult);

      // Make sure the result container is visible
      analysisResultContainer.classList.remove("hidden");

      // Display the analysis result in the page
      analysisResultContainer.innerHTML = `
        <h2>Analysis Result</h2>
        <pre>${JSON.stringify(runPlanResult, null, 2)}</pre>
      `;
    } catch (error) {
      console.error("Error during analysis:", error);

      // Make sure the result container is visible
      analysisResultContainer.classList.remove("hidden");

      // Display error message in the page
      analysisResultContainer.innerHTML = `
        <h2>Error</h2>
        <p>There was an error processing the analysis. Please try again later.</p>
        <p>Error details: ${error.message}</p>
      `;
    } finally {
      // Hide the loading message after the function completes
      loadingMessage.style.display = "none";
    }
  });
</script>