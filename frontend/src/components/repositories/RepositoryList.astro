---
import { supabase } from "../../lib/supabase";
import { styled } from '@mui/material/styles';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';


const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white,
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
  },
}));

const StyledTableRow = styled(TableRow)(({ theme }) => ({
  '&:nth-of-type(odd)': {
    backgroundColor: theme.palette.action.hover, // Grey for odd rows
  },
  '&:nth-of-type(even)': {
    backgroundColor: theme.palette.common.white, // White for even rows
  },
  // Hide last border
  '&:last-child td, &:last-child th': {
    border: 0,
  },
}));

const { data: { session } } = await supabase.auth.getSession();
const userEmail = session?.user?.email;

// Hardcode the username and access token
const username = import.meta.env.GITHUB_USERNAME;
const token = import.meta.env.GITHUB_TOKEN;


async function fetchUserRepositories(username, token) {
  const url = `https://api.github.com/users/${username}/repos`;

  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': `token ${token}`,
      'Accept': 'application/vnd.github.v3+json',
    },
  });

  if (!response.ok) {
    throw new Error(`Error fetching repositories: ${response.statusText}`);
  }

  const repositories = await response.json();
  return repositories;
}

const response = await fetchUserRepositories(username, token);
---

    <main>
      <h1>Repositories for {username}</h1>
      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 700 }} aria-label="customized table">
          <TableHead>
            <TableRow>
              <StyledTableCell>Name</StyledTableCell>
              <StyledTableCell>Description</StyledTableCell>
              <StyledTableCell>Owner</StyledTableCell>
              <StyledTableCell>Link</StyledTableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {response.map(repo => (
              <StyledTableRow key={repo.id}>
                <StyledTableCell component="th" scope="row">
                  {repo.name}
                </StyledTableCell>
                <StyledTableCell>{repo.description || 'No description available.'}</StyledTableCell>
                <StyledTableCell>
                  <a href={`https://github.com/${repo.owner.login}`} target="_blank" rel="noopener noreferrer">
                    <img src={repo.owner.avatar_url} alt={`${repo.owner.login}'s avatar`} width="20" height="20" />
                    {repo.owner.login}
                  </a>
                </StyledTableCell>
                <StyledTableCell>
                  <a href={repo.html_url} target="_blank" rel="noopener noreferrer">View Repository</a>
                </StyledTableCell>
              </StyledTableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </main>
  
  <style>
    .repository-table img {
      border-radius: 50%;
      margin-right: 5px;
    }
  
    .repository-table a {
      color: #0366d6;
      text-decoration: none;
    }
  
    .repository-table a:hover {
      text-decoration: underline;
    }
  </style>

